generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model UserWords {
  id             String         @id @default(cuid())
  wordId         String
  word           Words          @relation(fields: [wordId], references: [id])
  translatedText String
  learningStatus Boolean        @default(false)
  picture        String?
  Dictionary     Dictionaries[]
  authorId       String
  author         Profiles?      @relation(fields: [authorId], references: [id])
}

model Dictionaries {
  id        String      @id @default(cuid())
  title     String
  published Boolean     @default(false)
  authorId  String
  author    Profiles?   @relation(fields: [authorId], references: [id])
  UserWords UserWords[]
}

model Profiles {
  id             String         @id
  username       String?
  name           String
  avatar_url     String?
  nativeLanguage String?
  targetLanguage String?
  UserWords      UserWords[]
  Dictionaries   Dictionaries[]
}

model Words {
  id        String      @id
  text      String
  status    Boolean
  UserWords UserWords[]
}

// could be use for many to many relation

// model Post {
//   id         Int                 @id @default(autoincrement())
//   title      String
//   categories CategoriesOnPosts[]
// }

// model Category {
//   id    Int                 @id @default(autoincrement())
//   name  String
//   posts CategoriesOnPosts[]
// }

// model CategoriesOnPosts {
//   post       Post     @relation(fields: [postId], references: [id])
//   postId     Int // relation scalar field (used in the `@relation` attribute above)
//   category   Category @relation(fields: [categoryId], references: [id])
//   categoryId Int // relation scalar field (used in the `@relation` attribute above)
//   assignedAt DateTime @default(now())
//   assignedBy String

//   @@id([postId, categoryId])
// }
